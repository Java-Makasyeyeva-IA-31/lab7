package project.lab7;

import java.awt.Component;
import java.awt.Cursor;
import java.awt.Graphics;
import java.awt.Point;
import java.awt.datatransfer.Transferable;
import java.awt.dnd.DnDConstants;
import java.awt.dnd.DragGestureEvent;
import java.awt.dnd.DragGestureListener;
import java.awt.dnd.DragSource;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListCellRenderer;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JList;
import project.lab7.common.Direction;
import project.lab7.model.*;
import project.lab7.transfer.ElementTransferable;

public class Application extends javax.swing.JFrame {

    public static BufferedImage IMAGE;

    static {
        try {
            IMAGE = ImageIO.read(Application.class.getClassLoader().getResource("sprite1250x200x50.png"));
        } catch (IOException ex) {
            Logger.getLogger(Application.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private int directionIconIdx = 2;
    private final List<Element> elements = List.of(new Car(), new Boy(), new Girl(), new PineTree(),
            new MapleTree(), new RedHouse(), new OrangeHouse(), new Shop(), new StoneRoad(),
            new DilledRoad(), new Water(), new Gunflower());

    public Application() {
        initComponents();

        fillElementsCB();
        selectCBIcon();
        addElementIconLTransfarable();
        updateConstructorModeButtonBehavior();
    }

    private void fillElementsCB() {
        //put elements inside combobox
        elementsCB.setModel(new DefaultComboBoxModel<>(elements.toArray(Element[]::new)));

        //set text as simple name of element class
        elementsCB.setRenderer(new DefaultListCellRenderer() {
            @Override
            public Component getListCellRendererComponent(JList<?> list, Object value,
                    int index, boolean isSelected, boolean cellHasFocus) {
                Component c = super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
                setText(value.getClass().getSimpleName());

                return c;
            }
        });
    }

    private void selectCBIcon() {
        Element element = (Element) elementsCB.getSelectedItem();
        Direction currentDirection = Direction.values()[directionIconIdx];
        element.setDirection(currentDirection);
        ImageIcon imageIcon = element.getBaseImageIcon();
        elementIconL.setIcon(imageIcon);

        enableDisableButtons(element);
    }

    private void enableDisableButtons(Element element) {
        boolean enabled = false;

        if (element.isRotetable()) {
            enabled = true;
        }

        leftRotateB.setEnabled(enabled);
        rightRotateB.setEnabled(enabled);
    }

    private void addElementIconLTransfarable() {
        elementIconL.setDropTarget(null);

        DragSource ds = new DragSource();
        ds.createDefaultDragGestureRecognizer(elementIconL, DnDConstants.ACTION_COPY, new DragGestureListener() {
            @Override
            public void dragGestureRecognized(DragGestureEvent dge) {
                if (constructorModeCB.isSelected()) {
                    Element element = (Element) elementsCB.getSelectedItem();

                    // Create image from icon
                    Icon icon = element.getBaseImageIcon();
                    BufferedImage img = new BufferedImage(
                            icon.getIconWidth(), icon.getIconHeight(), BufferedImage.TYPE_INT_ARGB);
                    Graphics g = img.getGraphics();
                    icon.paintIcon(elementIconL, g, 0, 0);
                    g.dispose();

                    Point clickPoint = dge.getDragOrigin();
                    Point imageOffset = new Point(-clickPoint.x, -clickPoint.y);

                    Transferable transferable = new ElementTransferable(element, imageOffset);
                    ds.startDrag(dge, Cursor.getPredefinedCursor(Cursor.HAND_CURSOR), img, imageOffset, transferable, null);
                }
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        cityPanel = new CityPanel(750, 750);
        leftRotateB = new javax.swing.JButton();
        rightRotateB = new javax.swing.JButton();
        elementIconContainerP = new javax.swing.JPanel();
        elementIconL = new javax.swing.JLabel();
        elementsCB = new javax.swing.JComboBox<>();
        constructorModeCB = new javax.swing.JCheckBox();
        menubBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        saveMI = new javax.swing.JMenuItem();
        downloadMI = new javax.swing.JMenuItem();
        exitMI = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout cityPanelLayout = new javax.swing.GroupLayout(cityPanel);
        cityPanel.setLayout(cityPanelLayout);
        cityPanelLayout.setHorizontalGroup(
            cityPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 750, Short.MAX_VALUE)
        );
        cityPanelLayout.setVerticalGroup(
            cityPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 750, Short.MAX_VALUE)
        );

        leftRotateB.setText("Left Rotate");
        leftRotateB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                leftRotateBActionPerformed(evt);
            }
        });

        rightRotateB.setText("Right Rotate");
        rightRotateB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rightRotateBActionPerformed(evt);
            }
        });

        elementIconContainerP.setPreferredSize(new java.awt.Dimension(150, 150));
        elementIconContainerP.setLayout(new java.awt.GridBagLayout());

        elementIconL.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        elementIconL.setBorder(null);
        elementIconL.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        elementIconContainerP.add(elementIconL, gridBagConstraints);

        elementsCB.setMaximumRowCount(5);
        elementsCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                elementsCBActionPerformed(evt);
            }
        });

        constructorModeCB.setText("Constructor Mode");
        constructorModeCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                constructorModeCBActionPerformed(evt);
            }
        });

        fileMenu.setText("File");

        saveMI.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.META_DOWN_MASK));
        saveMI.setText("Save");
        saveMI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveMIActionPerformed(evt);
            }
        });
        fileMenu.add(saveMI);

        downloadMI.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.META_DOWN_MASK));
        downloadMI.setText("Download");
        downloadMI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downloadMIActionPerformed(evt);
            }
        });
        fileMenu.add(downloadMI);

        exitMI.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_ESCAPE, 0));
        exitMI.setText("Exit");
        exitMI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMIActionPerformed(evt);
            }
        });
        fileMenu.add(exitMI);

        menubBar.add(fileMenu);

        setJMenuBar(menubBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(cityPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(71, 71, 71)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(elementsCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(64, 64, 64)
                        .addComponent(leftRotateB))
                    .addComponent(constructorModeCB))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(elementIconContainerP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rightRotateB)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(cityPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(48, 48, 48)
                        .addComponent(rightRotateB))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(47, 47, 47)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(leftRotateB)
                            .addComponent(elementsCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(constructorModeCB))
                    .addComponent(elementIconContainerP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void elementsCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_elementsCBActionPerformed
        directionIconIdx = 2;
        selectCBIcon();
    }//GEN-LAST:event_elementsCBActionPerformed

    private void leftRotateBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_leftRotateBActionPerformed
        directionIconIdx = directionIconIdx + 1 == Direction.values().length ? 0 : directionIconIdx + 1;
        selectCBIcon();
    }//GEN-LAST:event_leftRotateBActionPerformed

    private void rightRotateBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rightRotateBActionPerformed
        directionIconIdx = directionIconIdx == 0 ? Direction.values().length - 1 : directionIconIdx - 1;
        selectCBIcon();
    }//GEN-LAST:event_rightRotateBActionPerformed

    private void constructorModeCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_constructorModeCBActionPerformed
        updateConstructorModeButtonBehavior();
    }//GEN-LAST:event_constructorModeCBActionPerformed

    private void saveMIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveMIActionPerformed
        getCityPanel().saveToFile();
    }//GEN-LAST:event_saveMIActionPerformed

    private void downloadMIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_downloadMIActionPerformed
        getCityPanel().downloadFromFile();
    }//GEN-LAST:event_downloadMIActionPerformed

    private void exitMIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMIActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMIActionPerformed

    private void updateConstructorModeButtonBehavior() {
        getCityPanel().setConstructorMode(constructorModeCB.isSelected());

        elementsCB.setEnabled(constructorModeCB.isSelected());
        leftRotateB.setEnabled(constructorModeCB.isSelected());
        rightRotateB.setEnabled(constructorModeCB.isSelected());
        elementIconL.setEnabled(constructorModeCB.isSelected());
    }

    private CityPanel getCityPanel() {
        return (CityPanel) cityPanel;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Application.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Application.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Application.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Application.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Application().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel cityPanel;
    private javax.swing.JCheckBox constructorModeCB;
    private javax.swing.JMenuItem downloadMI;
    private javax.swing.JPanel elementIconContainerP;
    private javax.swing.JLabel elementIconL;
    private javax.swing.JComboBox<Element> elementsCB;
    private javax.swing.JMenuItem exitMI;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JButton leftRotateB;
    private javax.swing.JMenuBar menubBar;
    private javax.swing.JButton rightRotateB;
    private javax.swing.JMenuItem saveMI;
    // End of variables declaration//GEN-END:variables
}
